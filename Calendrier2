from __future__ import print_function

import datetime
import os.path

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from Scraper_Omnivox_HoraireV3 import scraper

info = scraper()

def colorprofile():
    colorprofileID = int(input("Quelle couleurs voulez-vous que les évènements aillent?"))
    if colorprofileID == 1:
        for cle in info.keys():
            if info[cle]["local"][:1] == "A":
                info[cle]["couleur"] = "5"
            elif info[cle]["local"][:1] == "B":
                info[cle]["couleur"] = "8"
            elif info[cle]["local"][:1] == "D":
                info[cle]["couleur"] = "3"
            elif info[cle]["local"][:1] == "E":
                info[cle]["couleur"] = "6"
            elif info[cle]["local"][:1] == "F":
                info[cle]["couleur"] = "7"
            elif info[cle]["local"][:1] == "G":
                info[cle]["couleur"] = "9"
            elif info[cle]["local"][:1] == "H":
                info[cle]["couleur"] = "2"
            elif info[cle]["local"][:1] == "J":
                info[cle]["couleur"] = "4"
            else:
                info[cle]["couleur"] = "8"
    elif colorprofileID == 2:
        for cle in info.keys():
           info[cle]["couleur"] = "8"
colorprofile()
# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/calendar',"https://www.googleapis.com/auth/calendar.events","https://www.googleapis.com/auth/calendar.events.readonly"]

creds = None
# The file token.json stores the user's access and refresh tokens, and is
# created automatically when the authorization flow completes for the first
# time.
if os.path.exists('token.json'):
    creds = Credentials.from_authorized_user_file('token.json', SCOPES)
# If there are no (valid) credentials available, let the user log in.
if not creds or not creds.valid:
    if creds and creds.expired and creds.refresh_token:
        creds.refresh(Request())
    else:
        flow = InstalledAppFlow.from_client_secrets_file(
            'credentials.json', SCOPES)
        creds = flow.run_local_server(port=0)
    # Save the credentials for the next run
    with open('token.json', 'w') as token:
        token.write(creds.to_json())
service = build('calendar', 'v3', credentials=creds)
# Call the Calendar API
now = datetime.datetime.utcnow().isoformat() + 'Z'  # 'Z' indicates UTC time


def create_calendar():
    try:
        horaire_cegep_id = None
        page_token = None
        while True: 
            calendar_list = service.calendarList().list(pageToken=page_token).execute()
            for calendar_list_entry in calendar_list['items']:
                if calendar_list_entry['summary'] == "Horaire Cégep":
                    horaire_cegep_id = calendar_list_entry['id']
                    break
            if horaire_cegep_id:
                break
            if 'nextPageToken' in calendar_list:
                page_token = calendar_list['nextPageToken']
            else:
                calendar_request_body = {
                    "summary": "Horaire Cégep",
                    "timeZone": "America/Montreal"
                }
                created_calendar = service.calendars().insert(body=calendar_request_body).execute()
                horaire_cegep_id = created_calendar['id']
                break
    except HttpError as error:
        print(f'An error occurred: {error}')
    return horaire_cegep_id

calendar_id = create_calendar()
      
FinHoraire = input("Entrez la date de fin de l'horaire (AAAAMMJJ):")

create_calendar()

recurring_schedule = {}
for cle in info.keys():
    date = info[cle]["date_time_debut"][:9]
    event = info[cle]
    recurring_event = recurring_schedule.get(date, event)
    if event == recurring_event:
        recurring_schedule[date] = event
        exdate = date.replace("-","")
    else:
        recurring_schedule[date] = recurring_event
        exdate = ""
    event_request_body = {
        "summary": event["titre"],
        "location": event["local"],
        "start": {
            "dateTime": event["date_time_debut"],
            "timeZone": "America/Montreal",
        },
        "end": {
            "dateTime": event["date_time_fin"],
            "timeZone": "America/Montreal",
        },
        "recurrence": [
            "RRULE:FREQ=WEEKLY;UNTIL={}".format(FinHoraire),
            "EXDATE:{}".format(exdate)
        ],
        "colorId": info[cle]["couleur"],
    }
    # Create the event
    service.events().insert(calendarId=calendar_id, body=event_request_body).execute()
